(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{416:function(a,t,e){"use strict";e.r(t);var r=e(11),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[a._v("#")]),a._v(" Docker")]),a._v(" "),e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),e("h3",{attrs:{id:"什么是-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-docker"}},[a._v("#")]),a._v(" 什么是 Docker")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker"),e("OutboundLink")],1),a._v(" 是一个开发、运输、运行应用程序的开放平台。")]),a._v(" "),e("p",[a._v("Docker可以使你将应用程序和你的基础架构(设备)分离，因此你可以快速的交付你软件。")]),a._v(" "),e("p",[a._v("使用Docker，你可以管理应用程序一样管理你的基础架构，通过使用Docker的methodologies来快速的传输、测试和部署代码，可以显著的缩短编写代码和生成环境中运行的代码之间的延迟。")]),a._v(" "),e("p",[a._v("Docker 是一个开源的应用容器引擎，基于 "),e("a",{attrs:{href:"https://www.runoob.com/go/go-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Go 语言"),e("OutboundLink")],1),a._v(" 并遵从 Apache2.0 协议开源。")]),a._v(" "),e("p",[a._v("Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。")]),a._v(" "),e("p",[a._v("容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。")]),a._v(" "),e("h3",{attrs:{id:"docker的应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker的应用场景"}},[a._v("#")]),a._v(" Docker的应用场景")]),a._v(" "),e("ul",[e("li",[a._v("Web 应用的自动化打包和发布。")]),a._v(" "),e("li",[a._v("自动化测试和持续集成、发布。")]),a._v(" "),e("li",[a._v("在服务型环境中部署和调整数据库或其他的后台应用。")]),a._v(" "),e("li",[a._v("从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。")])]),a._v(" "),e("h3",{attrs:{id:"docker-的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-的优点"}},[a._v("#")]),a._v(" Docker 的优点")]),a._v(" "),e("p",[a._v("Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。")]),a._v(" "),e("h4",{attrs:{id:"_1、快速-一致地交付您的应用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、快速-一致地交付您的应用程序"}},[a._v("#")]),a._v(" 1、快速，一致地交付您的应用程序")]),a._v(" "),e("p",[a._v("Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。")]),a._v(" "),e("p",[a._v("容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：")]),a._v(" "),e("ul",[e("li",[a._v("您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。")]),a._v(" "),e("li",[a._v("他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。")]),a._v(" "),e("li",[a._v("当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。")]),a._v(" "),e("li",[a._v("测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。")])]),a._v(" "),e("h4",{attrs:{id:"_2、响应式部署和扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、响应式部署和扩展"}},[a._v("#")]),a._v(" 2、响应式部署和扩展")]),a._v(" "),e("p",[a._v("Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。")]),a._v(" "),e("p",[a._v("Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。")]),a._v(" "),e("h4",{attrs:{id:"_3、在同一硬件上运行更多工作负载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、在同一硬件上运行更多工作负载"}},[a._v("#")]),a._v(" 3、在同一硬件上运行更多工作负载")]),a._v(" "),e("p",[a._v("Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。")]),a._v(" "),e("h2",{attrs:{id:"macos-docker-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#macos-docker-安装"}},[a._v("#")]),a._v(" MacOS Docker 安装")]),a._v(" "),e("h3",{attrs:{id:"使用-homebrew-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-homebrew-安装"}},[a._v("#")]),a._v(" 使用 Homebrew 安装")]),a._v(" "),e("p",[a._v("macOS 我们可以使用 Homebrew 来安装 Docker。")]),a._v(" "),e("p",[a._v("Homebrew 的 Cask 已经支持 Docker for Mac，因此可以很方便的使用 Homebrew Cask 来进行安装：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ brew "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" --cask --appdir"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/Applications docker\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Creating Caskroom at /usr/local/Caskroom\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" We"),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ll set permissions properly so we won'")]),a._v("t need "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" the future\nPassword:          "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 输入 macOS 密码")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Satisfying dependencies\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Downloading https://download.docker.com/mac/stable/21090/Docker.dmg\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("######################################################################## 100.0%")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Verifying checksum "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" Cask docker\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Installing Cask docker\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Moving App "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Docker.app'")]),a._v(" to "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'/Applications/Docker.app'")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#x1f37a;  docker was successfully installed!")]),a._v("\n")])])]),e("p",[a._v("在载入 Docker app 后，点击 Next，可能会询问你的 macOS 登陆密码，你输入即可。之后会弹出一个 Docker 运行的提示窗口，状态栏上也有有个小鲸鱼的图标（"),e("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2018/01/1515480613-2248-whale-x.png",alt:"img"}}),a._v("）。")]),a._v(" "),e("h3",{attrs:{id:"手动下载安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手动下载安装"}},[a._v("#")]),a._v(" 手动下载安装")]),a._v(" "),e("p",[a._v("如果需要手动下载，请点击以下链接下载 "),e("a",{attrs:{href:"https://download.docker.com/mac/stable/Docker.dmg",target:"_blank",rel:"noopener noreferrer"}},[a._v("Stable"),e("OutboundLink")],1),a._v(" 或 "),e("a",{attrs:{href:"https://download.docker.com/mac/edge/Docker.dmg",target:"_blank",rel:"noopener noreferrer"}},[a._v("Edge"),e("OutboundLink")],1),a._v(" 版本的 Docker for Mac。")]),a._v(" "),e("ol",[e("li",[a._v("如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将鲸鱼图标拖拽到 Application 文件夹即可。")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2021/04/26/ew4hojkFPalbnq6.png",alt:"Install Docker app"}})]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v('在应用程序文件夹中双击以启动 Docker。（在下面的示例中，应用程序文件夹处于"网格"视图模式。'),e("code",[a._v("Docker.app")])])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2021/04/26/IN1g6dHuDn5TSRl.png",alt:"Docker app in Hockeyapp"}})]),a._v(" "),e("p",[a._v("顶部状态栏中的 Docker 菜单指示 Docker 桌面正在运行，并且从终端访问。"),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Users/guozhiyuan/Library/Application Support/typora-user-images/image-20210426141648089.png",alt:"image-20210426141648089"}})]),a._v(" "),e("p",[a._v("如果您刚刚安装了该应用程序，Docker 桌面将启动入职教程。教程包括一个简单的练习，以建立一个示例Docker图像，运行它作为一个容器，推送和保存图像到Docker集线器。"),e("img",{attrs:{src:"https://i.loli.net/2021/04/26/dtT1oE7rmSzfHV3.png",alt:"Docker Quick Start tutorial"}})]),a._v(" "),e("h2",{attrs:{id:"docker-镜像加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像加速"}},[a._v("#")]),a._v(" Docker 镜像加速")]),a._v(" "),e("p",[a._v("鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：")]),a._v(" "),e("ul",[e("li",[a._v("科大镜像："),e("strong",[a._v("https://docker.mirrors.ustc.edu.cn/")])]),a._v(" "),e("li",[a._v("网易："),e("strong",[a._v("https://hub-mirror.c.163.com/")])]),a._v(" "),e("li",[a._v("阿里云："),e("strong",[a._v("https://<你的ID>.mirror.aliyuncs.com")])]),a._v(" "),e("li",[a._v("七牛云加速器："),e("strong",[a._v("https://reg-mirror.qiniu.com")])])]),a._v(" "),e("p",[a._v("当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务。")]),a._v(" "),e("p",[a._v("阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了：")]),a._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://i.loli.net/2021/04/26/QgOBrFETulWbned.png",alt:"image-20210426142322840"}}),a._v(" "),e("p",[a._v("在任务栏点击 Docker Desktop 应用图标 -> Perferences，在左侧导航菜单选择 Docker Engine，在右侧输入栏编辑 json 文件。将"),e("code",[a._v("https://<你的ID>.mirror.aliyuncs.com")]),a._v('加到"'),e("code",[a._v("registry-mirrors")]),a._v('"的数组里，点击 '),e("code",[a._v("Apply & Restart")]),a._v("按钮，等待Docker重启并应用配置的镜像加速器。")]),a._v(" "),e("h2",{attrs:{id:"docker-常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-常用命令"}},[a._v("#")]),a._v(" Docker 常用命令")]),a._v(" "),e("h3",{attrs:{id:"docker-ps-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-ps-命令"}},[a._v("#")]),a._v(" Docker ps 命令")]),a._v(" "),e("p",[e("strong",[a._v("ocker ps :")]),a._v(" 列出容器")]),a._v(" "),e("h4",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[a._v("OPTIONS说明：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("-a")]),a._v(" :显示所有的容器，包括未运行的。")]),a._v(" "),e("li",[e("code",[a._v("-f")]),a._v(" :根据条件过滤显示的内容。")]),a._v(" "),e("li",[e("code",[a._v("--format")]),a._v(" :指定返回值的模板文件。")]),a._v(" "),e("li",[e("code",[a._v("-l")]),a._v(" :显示最近创建的容器。")]),a._v(" "),e("li",[e("code",[a._v("-n")]),a._v(" :列出最近创建的n个容器。")]),a._v(" "),e("li",[e("code",[a._v("--no-trunc")]),a._v(" :不截断输出。")]),a._v(" "),e("li",[e("code",[a._v("-q")]),a._v(" :静默模式，只显示容器编号。")]),a._v(" "),e("li",[e("code",[a._v("-s")]),a._v(" :显示总的文件大小。")])]),a._v(" "),e("h4",{attrs:{id:"实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),e("p",[a._v("列出所有在运行的容器信息。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("runoob@runoob:~$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v("\nCONTAINER ID   IMAGE          COMMAND                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".  PORTS                    NAMES\n09b93464c2f7   nginx:latest   "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"nginx -g \'daemon off"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".  "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("/tcp, "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("443")]),a._v("/tcp          myrunoob\n96f7f14e99ab   mysql:5.6      "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"docker-entrypoint.sh"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".  "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v(".0.0:3306-"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3306")]),a._v("/tcp   mymysql\n")])])]),e("p",[a._v("输出详情介绍：")]),a._v(" "),e("p",[e("strong",[a._v("CONTAINER ID:")]),a._v(" 容器 ID。")]),a._v(" "),e("p",[e("strong",[a._v("IMAGE:")]),a._v(" 使用的镜像。")]),a._v(" "),e("p",[e("strong",[a._v("COMMAND:")]),a._v(" 启动容器时运行的命令。")]),a._v(" "),e("p",[e("strong",[a._v("CREATED:")]),a._v(" 容器的创建时间。")]),a._v(" "),e("p",[e("strong",[a._v("STATUS:")]),a._v(" 容器状态。")]),a._v(" "),e("p",[a._v("状态有7种：")]),a._v(" "),e("ul",[e("li",[a._v("created（已创建）")]),a._v(" "),e("li",[a._v("restarting（重启中）")]),a._v(" "),e("li",[a._v("running（运行中）")]),a._v(" "),e("li",[a._v("removing（迁移中）")]),a._v(" "),e("li",[a._v("paused（暂停）")]),a._v(" "),e("li",[a._v("exited（停止）")]),a._v(" "),e("li",[a._v("dead（死亡）")])]),a._v(" "),e("p",[e("strong",[a._v("PORTS:")]),a._v(" 容器的端口信息和使用的连接类型（tcp\\udp）。")]),a._v(" "),e("p",[e("strong",[a._v("NAMES:")]),a._v(" 自动分配的容器名称。")]),a._v(" "),e("p",[a._v("列出最近创建的5个容器信息。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('runoob@runoob:~$ docker ps -n 5\nCONTAINER ID        IMAGE               COMMAND                   CREATED           \n09b93464c2f7        nginx:latest        "nginx -g \'daemon off"    2 days ago   ...     \nb8573233d675        nginx:latest        "/bin/bash"               2 days ago   ...     \nb1a0703e41e7        nginx:latest        "nginx -g \'daemon off"    2 days ago   ...    \nf46fb1dec520        5c6e1090e771        "/bin/sh -c \'set -x \\t"   2 days ago   ...   \na63b4a5597de        860c279d2fec        "bash"                    2 days ago   ...\n')])])]),e("p",[a._v("列出所有创建的容器ID。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("runoob@runoob:~$ docker ps -a -q\n09b93464c2f7\nb8573233d675\nb1a0703e41e7\nf46fb1dec520\na63b4a5597de\n6a4aa42e947b\nde7bb36e7968\n43a432b73776\n664a8ab1a585\nba52eb632bbd\n...\n")])])]),e("p",[e("strong",[a._v("根据条件过滤显示的内容")])]),a._v(" "),e("p",[a._v("根据标签过滤")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('$ docker run -d --name=test-nginx --label color=blue nginx\n$ docker ps --filter "label=color"\n$ docker ps --filter "label=color=blue"\n')])])]),e("p",[a._v("根据名称过滤")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('$ docker ps --filter"name=test-nginx"\n')])])]),e("p",[a._v("根据状态过滤")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ docker ps -a --filter 'exited=0'\n$ docker ps --filter status=running\n$ docker ps --filter status=paused\n")])])]),e("p",[a._v("根据镜像过滤")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#镜像名称\n$ docker ps --filter ancestor=nginx\n\n#镜像ID\n$ docker ps --filter ancestor=d0e008c6cf02\n")])])]),e("p",[a._v("根据启动顺序过滤")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ docker ps -f before=9c3527ed70ce\n$ docker ps -f since=6e63f6ff38b0\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);